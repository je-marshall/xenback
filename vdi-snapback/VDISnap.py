#!/bin/env python2.7

import XenAPI
import sys
import time


class VM:
	''' 
		Simple holding class for VM operations
	'''

	def __init__(self, session, vm_ref, vm_dict):
		self.session = session
		self.vm_ref = vm_ref
		self.vm_dict = vm_dict
		self.uuid = vm_dict["uuid"]
		self.name = vm_dict["name_label"]
		self.vbd_list = []
		self.vdi_list = []
	
	def get_vbd_list(self, all_vbds, all_vdis):
		# Returns a list of all the vbds associated with this vm

		for opaqueref, vbd in all_vbds.items():
			if opaqueref in self.vm_dict["VBDs"]:
				self.vbd_list.append(vbd)
				vdi = self.vdi_from_vbd(vbd["VDI"], all_vdis)
				self.vdi_list.append(vdi)
	
	def vdi_from_vbd(self, vdi_ref, all_vdis):
		# Returns a VDI dict from an opaqueref
		
		for opaqueref, vdi in all_vdis.items():
			if vdi_ref in opaqueref:
				return_vdi = vdi

		return return_vdi

	def pause(self):
		# Pauses the VM
		try:
			self.session.xenapi.VM.pause(self.vm_ref)
		except Exception, e:
			pass
			# log error

	def unpause(self):
		# Resumes the VM
		try:
			self.session.xenapi.VM.unpause(self.vm_ref)
		except Exception, e:
			pass
			# log error
	
	def snapshot_vdi(self, all_disks=False):
		# Snapshots the first disk of the VM unless told otherwise, then returns
		# a list of the OpaqueRef Id's generated by xen
		
		snapshot_list = []

		if not all_disks:
			for vbd in self.vbd_list:
				if vbd["userdevice"] == "0":
					try:
						return_ref = self.session.xenapi.VDI.snapshot(vbd["VDI"])
						snapshot_list.append(return_ref)
					except Exception, e:
						pass
						# insert logging and error handling here

		else:
			for vbd in self.vbd_list:
				try:
					return_ref = self.session.xenapi.VDI.snapshot(vbd["VDI"])
					snapshot_list.append(return_ref)
				except Exception, e:
					pass
					# insert logging and error handling here

		return snapshot_list

	def delete_vdi(self, vdi):
		# Deletes a VDI but if and only if it is a snapshot and is associated with
		# the VM that 
